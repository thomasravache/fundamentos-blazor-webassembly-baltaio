@page "/"
@using RestSharp

<PageTitle>Categorias</PageTitle>


@if(_categories is null)
{
    <p>
        <em>Carregando...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var category in _categories)
            {
                <tr>
                    <td>@category.Id</td>
                    <td>@category.Title</td>
                    <td>@category.Description</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => GetAsync(category.Id)">
                            EDIT
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteAsync(category.Id)">
                            REMOVE
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr>

<div class="form-group">
    @* <label class="form-label">ID</label> *@
    <input type="hidden" class="form-control" @bind="_category.Id">
</div>
<div class="form-group">
    <label class="form-label">Title</label>
    <input type="text" class="form-control" @bind="_category.Title">
</div>
<div class="form-group">
    <label class="form-label">Description</label>
    <input type="text" class="form-control" @bind="_category.Description">
</div>
<button class="btn btn-primary" @onclick="UpsertAsync">SAVE</button>

@code {

    private List<Category>? _categories;
    private Category _category = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        @* _categories = await Http.GetFromJsonAsync<List<Category>>("v1/categories"); *@

        var client = new RestClient();
        var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories");

        _categories = await client.GetAsync<List<Category>?>(request);
    }

    // Pode ter o nome Save ou Upsert -> Upsert é o nome pra quando queremos atualizar e salvar no mesmo método
    private async Task UpsertAsync()
    {
        if (_category is null) return;

        var client = new RestClient();
        Category? category;

        if (_category.Id == 0)
        {
            var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories")
                .AddJsonBody(_category);

            category = await client.PostAsync<Category?>(request);

            _categories?.Add(_category);
        }
        else
        {
            var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories/{_category.Id}")
                .AddJsonBody(_category);

            category = await client.PutAsync<Category?>(request);

            if (category is not null)
            {
                var categoryItem = _categories?.FirstOrDefault(x => category.Id == x.Id);

                if (categoryItem is not null)
                {
                    categoryItem.Title = category.Title;
                    categoryItem.Description = category.Description;
                }
            }
        }

        _category = new Category();
    }

    public async Task GetAsync(int id)
    {
        var client = new RestClient();

        var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories/{id}");

        var category = await client.GetAsync<Category?>(request);

        if (category is null) return;

        _category = category;
    }

    public async Task DeleteAsync(int id)
    {
        var client = new RestClient();
        var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories/{id}");

        try 
        {
            var category = await client.DeleteAsync<Category?>(request);

            _categories?.Remove(_categories.First(x => x.Id == id));
        }
        catch
        {
        }
        
    }
}